*Kalibrierung:

Allgemeiner Ansatz:
1.) Initiale Kalibrierung anhand eines Abgleichs zwischen visueller Odometrie und LiDAR-Odometrie. Hierfür wird lediglich gegebener Code aus dem Internet benutzt.
2.) Verfeinerung der Kalibrierung anhand von Liniendetektionen sowohl im Bild als auch in der LiDAR-Punktwolke. Hier werden Detektionen einander zugeordnet (data association) und ein Optimierungsproblem aufgestellt, um die extrinsische Kalibrierung zu verbessern.

Notizen:
- Der Ansatz funktioniert bereits mit pinhole Kamerabildern, da Srdjan es zum Laufen gebracht hat. Jedoch lässt sich der code wohl schwer kompilieren und ist in einem nicht so guten Zustand, da gegen Ende der Arbeit viele Experimente durchgeführt wurden. Teile des Codes befinden sich wohl unter code/EXTERNAL/ais_navigation im kalimu repo, wobei ais_navigation auch ein submodule ist. Dort musst man auf den branch "srdjans_calibration", wo sich drei launch files befinden (Bilder mit Liniendetektion und gesamte Kalibrierung).
- Da eine visuelle Odometrie sich nicht auf die Schnelle implementieren lassen wird, möchten wir den ersten Schritt überspringen und lediglich mit einer groben manuellen Kalibrierung anfangen.
- Wir haben einen Scan-matcher, der wohl auch mit den Sick-Daten funktioniert. Zur Liniendetektion könnte es Sinn machen, diese Daten zunächst aufzuintegrieren und erst im Nachhinein Linien darin zu detektieren.
- Der Scanmatcher ist im package bta_scan_matcher. Der ist im KaLiMU git unter code/EXTERNAL/ais_lib_ros/yaocl_processing. Der branch den du in dem submodule brauchst heißt auch "bta_scan_matcher". Dort gibt es auch ein launch file, create_merged_pcl.launch, das ein scan matching macht, die berechneten neuen Transforms in den tf tree in ein output bag schreibt, und die gemergte point cloud auch in das output bag schreibt.

Wie möchten wir vorgehen?
1.) Hole dir die Daten von Srdjan
2.) Bringe Srdjans code zum Laufen mit den gegebenen Daten
3.) Detektiere Linien in Panoramabildern. Hatte Freya nicht schon angefangen damit? Wo ist der code?
4.) Detektiere Linien in aufintegrierten Punktwolken
5.) Datenassoziation und Optimierung

Die Schritte 3, 4 und 5 sind ähnlich wie in Srdjans Ansatz. Es müssen vermutlich lediglich einige Anpassungen durchgeführt werden, sodass jedes Modul funktioniert.

Wir werden sowohl Daten mit dem aktuellen KaLiMU-Prototypen als auch mit dem SICK-Demonstrator aufnehmen und die Kalibrierung testen.
